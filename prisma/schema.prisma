generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authUser {
  id                String          @id @default(uuid())
  username          String          @unique
  password          String
  email             String          @unique
  role              Role            @default(Customer)
  is_verify_phone   Boolean?
  verify_phone_code String?
  created_at        DateTime?       @default(now())
  created_by        String?         @default("System")
  updated_at        DateTime?
  updated_by        String?
  UserProfile       userProfile?    @relation("UserProfile")
  whatsappDevice    whatsappDevice? @relation("WhatsappDevice")
}

model userProfile {
  id            String         @id @default(uuid())
  user_id       String         @unique
  full_name     String
  phone_number  String         @unique
  gender        Gender
  created_at    DateTime?      @default(now())
  created_by    String?        @default("System")
  updated_at    DateTime?
  updated_by    String?
  authUser      authUser       @relation("UserProfile", fields: [user_id], references: [id])
  notifications notification[] @relation("Notification")
}

model whatsappDevice {
  id         String    @id @default(uuid())
  user_id    String    @unique
  session_id String    @unique
  created_at DateTime? @default(now())
  created_by String?   @default("System")
  updated_at DateTime?
  updated_by String?
  authUser   authUser  @relation("WhatsappDevice", fields: [user_id], references: [id])
}

model notification {
  id             String      @id @default(uuid())
  message        String      @db.Text
  receiver_id    String
  is_scheduled   Boolean
  scheduled_date DateTime
  created_at     DateTime?   @default(now())
  created_by     String?     @default("System")
  updated_at     DateTime?
  updated_by     String?
  receiver       userProfile @relation("Notification", fields: [receiver_id], references: [id])
}

model serviceType {
  id         String     @id @default(uuid())
  name       String     @unique
  unit       Unit
  created_at DateTime?  @default(now())
  created_by String?    @default("System")
  updated_at DateTime?
  updated_by String?
  item       itemType[] @relation("Service")
}

model itemType {
  id           String        @id @default(uuid())
  service_id   String
  name         String        @unique
  price        Int
  created_at   DateTime?     @default(now())
  created_by   String?       @default("System")
  updated_at   DateTime?
  updated_by   String?
  service_type serviceType   @relation("Service", fields: [service_id], references: [id])
  detailOrder  detailOrder[] @relation("Items")
}

model paymentService {
  id              String      @id @default(uuid())
  name            String
  account_number  String      @unique
  payment_type_id String
  created_at      DateTime?   @default(now())
  created_by      String?     @default("System")
  updated_at      DateTime?
  updated_by      String?
  payment_type    paymentType @relation("Payment_ACC", fields: [payment_type_id], references: [id])
  orders          orders[]    @relation("Order_Payment")
}

model paymentType {
  id              String           @id @default(uuid())
  name            String           @unique
  created_at      DateTime?        @default(now())
  created_by      String?          @default("System")
  updated_at      DateTime?
  updated_by      String?
  payment_service paymentService[] @relation("Payment_ACC")
}

model orders {
  id             String          @id @default(uuid())
  bill_no        String          @unique
  user_id        String
  cashier_id     String
  status         OrderStatus     @default(RECEIVED)
  date_received  DateTime
  date_pickup    DateTime
  is_paid        Boolean         @default(false)
  payment_id     String?
  total          BigInt
  created_at     DateTime?       @default(now())
  created_by     String?         @default("System")
  updated_at     DateTime?
  updated_by     String?
  detailOrder    detailOrder[]   @relation("Orders")
  pay_service_id paymentService? @relation("Order_Payment", fields: [payment_id], references: [id])
}

model detailOrder {
  id           String    @id @default(uuid())
  order_id     String
  item_id      String
  quantity     Int
  total_price  BigInt
  created_at   DateTime? @default(now())
  created_by   String?   @default("System")
  updated_at   DateTime?
  updated_by   String?
  orders       orders    @relation("Orders", fields: [order_id], references: [id])
  item_type_id itemType  @relation("Items", fields: [item_id], references: [id])
}

enum OrderStatus {
  RECEIVED
  PROCESS
  FINISH
  COMPLETED
}

enum PaymentStatus {
  PAID
  UNPAID
  CANCELED
}

enum Unit {
  Kg
  Pcs
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  Admin
  Customer
}
